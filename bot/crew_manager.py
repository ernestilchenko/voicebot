import logging
from datetime import datetime, timedelta
import pytz
import random

from webapp.database import SessionLocal
from webapp.models import User, Document

logger = logging.getLogger(__name__)


class CrewManager:
    """
    Prosta implementacja mened≈ºera Crew AI do analizy dokument√≥w.
    Ta wersja nie wymaga zewnƒôtrznych API i s≈Çu≈ºy jako przyk≈Çad.
    """

    def __init__(self, api_key=None):
        """
        Inicjalizacja mened≈ºera.

        Args:
            api_key: Opcjonalny klucz API (nie u≈ºywany w tej wersji)
        """
        logger.info("Zainicjalizowano uproszczonƒÖ wersjƒô Crew AI Manager")

    def create_document_analysis_crew(self, document_id):
        """
        Uproszczona "analiza" dokumentu zwracajƒÖca predefiniowane rekomendacje.

        Args:
            document_id: ID dokumentu do analizy

        Returns:
            str: Wyniki analizy dokumentu
        """
        db = SessionLocal()
        try:
            document = db.query(Document).filter(Document.id == document_id).first()
            user = db.query(User).filter(User.id == document.user_id).first()

            if not document or not user:
                logger.error(f"Nie znaleziono dokumentu lub u≈ºytkownika: document_id={document_id}")
                return "B≈ÇƒÖd: Nie znaleziono dokumentu lub u≈ºytkownika"

            # Symulacja czasu przetwarzania
            import time
            time.sleep(1)

            # Obliczenia na podstawie daty wyga≈õniƒôcia
            current_date = datetime.now(pytz.UTC)
            days_left = (document.expiration_date - current_date).days if document.expiration_date else 30

            # Okre≈õlenie priorytetu
            if days_left <= 14:
                priority = "KRYTYCZNY"
            elif days_left <= 30:
                priority = "WYSOKI"
            elif days_left <= 60:
                priority = "≈öREDNI"
            else:
                priority = "NISKI"

            # Losowe rekomendacje w zale≈ºno≈õci od priorytetu
            recommendations = []
            if priority in ["KRYTYCZNY", "WYSOKI"]:
                recommendations = [
                    "Natychmiast rozpocznij proces odnowienia dokumentu",
                    "Przygotuj wszystkie potrzebne dokumenty w ciƒÖgu 2 dni",
                    "Skontaktuj siƒô z urzƒôdem telefonicznie dla przyspieszenia procesu",
                    "Rozwa≈º opcjƒô przyspieszenia za dodatkowƒÖ op≈ÇatƒÖ"
                ]
            else:
                recommendations = [
                    f"Zaplanuj odnowienie dokumentu na co najmniej {max(14, days_left - 30)} dni przed wyga≈õniƒôciem",
                    "Przygotuj wymagane dokumenty i zr√≥b ich kopie",
                    "Sprawd≈∫ godziny otwarcia urzƒôdu i wymagania online",
                    "Zarezerwuj termin wizyty z wyprzedzeniem"
                ]

            # Formatowanie wyniku
            result = (
                f"*Analiza dokumentu: {document.name}*\n\n"
                f"üìä *Priorytet*: {priority}\n"
                f"‚è±Ô∏è *Pozosta≈Çy czas*: {days_left} dni\n"
                f"üìÖ *Data wyga≈õniƒôcia*: {document.expiration_date.strftime('%d.%m.%Y') if document.expiration_date else 'Brak'}\n\n"
                f"*Rekomendowane dzia≈Çania:*\n"
            )

            for i, rec in enumerate(recommendations, 1):
                result += f"{i}. {rec}\n"

            result += "\n*Uwaga*: To jest symulacja analizy dokumentu. W pe≈Çnej wersji Crew AI, analiza by≈Çaby znacznie bardziej dok≈Çadna i spersonalizowana."

            logger.info(f"Wygenerowano analizƒô dla dokumentu {document_id}")
            return result

        except Exception as e:
            logger.error(f"B≈ÇƒÖd podczas analizy dokumentu: {e}")
            return f"WystƒÖpi≈Ç b≈ÇƒÖd podczas analizy: {str(e)}"
        finally:
            db.close()

    async def generate_custom_reminder(self, user_id, document_id, reminder_type):
        """
        Generuje proste przypomnienie dla u≈ºytkownika.

        Args:
            user_id: ID u≈ºytkownika
            document_id: ID dokumentu
            reminder_type: Typ przypomnienia ('telegram', 'sms', 'voice')

        Returns:
            str: Tre≈õƒá przypomnienia
        """
        db = SessionLocal()
        try:
            document = db.query(Document).filter(Document.id == document_id).first()
            user = db.query(User).filter(User.id == user_id).first()

            if not document or not user:
                return None

            # Przyk≈Çadowe szablony przypomnie≈Ñ
            if reminder_type == 'telegram':
                templates = [
                    f"üì¢ Wa≈ºne przypomnienie: Tw√≥j dokument '{document.name}' wyga≈õnie dnia {document.expiration_date.strftime('%d.%m.%Y')}. Zaplanuj odnowienie ju≈º teraz.",
                    f"‚ö†Ô∏è {user.first_name}, zosta≈Ço tylko {(document.expiration_date - datetime.now(pytz.UTC)).days} dni do wyga≈õniƒôcia dokumentu '{document.name}'. Nie zwlekaj z odnowieniem.",
                    f"üîî Przypomnienie: '{document.name}' traci wa≈ºno≈õƒá {document.expiration_date.strftime('%d.%m.%Y')}. Zadbaj o jego odnowienie w odpowiednim czasie."
                ]
            elif reminder_type == 'sms':
                templates = [
                    f"PRZYPOMNIENIE: Dokument '{document.name}' wygasa {document.expiration_date.strftime('%d.%m.%Y')}. Zaplanuj odnowienie.",
                    f"{user.first_name}, Twoj dokument wygasa wkrotce. Odnow go do {document.expiration_date.strftime('%d.%m.%Y')}.",
                    f"Wazne: '{document.name}' traci waznosc za {(document.expiration_date - datetime.now(pytz.UTC)).days} dni. Skontaktuj sie z urzedem."
                ]
            elif reminder_type == 'voice':
                templates = [
                    f"Dzie≈Ñ dobry, przypominamy ≈ºe dokument {document.name} wygasa dnia {document.expiration_date.strftime('%d %B %Y')}. Proszƒô zaplanowaƒá wizytƒô w urzƒôdzie w celu jego odnowienia.",
                    f"Witaj {user.first_name}, dzwonimy przypomnieƒá o zbli≈ºajƒÖcym siƒô terminie wa≈ºno≈õci dokumentu {document.name}. Prosimy o kontakt z urzƒôdem w celu jego przed≈Çu≈ºenia.",
                    f"Automatyczne przypomnienie: dokument {document.name} wyga≈õnie za {(document.expiration_date - datetime.now(pytz.UTC)).days} dni. Prosimy o podjƒôcie dzia≈Ça≈Ñ w celu jego odnowienia."
                ]
            else:
                templates = [
                    f"Przypomnienie: Dokument '{document.name}' wygasa {document.expiration_date.strftime('%d.%m.%Y')}."
                ]

            # Wybierz losowy szablon
            return random.choice(templates)

        except Exception as e:
            logger.error(f"B≈ÇƒÖd podczas generowania przypomnienia: {e}")
            return None
        finally:
            db.close()