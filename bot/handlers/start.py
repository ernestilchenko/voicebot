import calendar
import logging
from datetime import datetime
from datetime import timedelta

import pytz
from aiogram import Router, types, F
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton

from webapp.database import get_db
from webapp.models import User, Document

router = Router()


# Definicja stan√≥w dla przep≈Çywu pracy u≈ºytkownika
class UserStates(StatesGroup):
    WAITING_FOR_PHONE = State()
    WAITING_FOR_DOCUMENT = State()
    WAITING_FOR_DATE = State()
    DATE_YEAR = State()
    DATE_MONTH = State()
    DATE_DAY = State()


@router.message(Command("help"))
async def cmd_help(message: Message):
    text = (
        "*Dostƒôpne komendy:*\n\n"
        "/start - Rozpocznij pracƒô z botem i zarejestruj siƒô\n"
        "/documents - Wy≈õwietl listƒô wszystkich aktualnych dokument√≥w\n"
        "/help - Wy≈õwietl tƒô wiadomo≈õƒá pomocy\n\n"

        "*Jak korzystaƒá z bota:*\n"
        "1. Zarejestruj siƒô u≈ºywajƒÖc komendy /start i podaj sw√≥j numer telefonu\n"
        "2. Wy≈õlij sw√≥j dokument\n"
        "3. Wybierz datƒô wa≈ºno≈õci dokumentu\n"
        "4. Bot automatycznie przypomni Ci o zbli≈ºajƒÖcym siƒô terminie wa≈ºno≈õci:\n"
        "   - Powiadomienie w Telegramie na miesiƒÖc przed\n"
        "   - SMS na 3 tygodnie przed\n"
        "   - Po≈ÇƒÖczenie g≈Çosowe na 2 tygodnie przed"
    )
    await message.answer(text, parse_mode="Markdown")


@router.message(Command("documents"))
async def cmd_my_documents(message: Message):
    """Pokazuje wszystkie dokumenty u≈ºytkownika"""
    db = next(get_db())
    try:
        # Znajd≈∫ u≈ºytkownika po telegram_id
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

        if not user:
            await message.answer("Nie jeste≈õ zarejestrowany w systemie. U≈ºyj /start aby siƒô zarejestrowaƒá.")
            return

        # Pobierz wszystkie dokumenty u≈ºytkownika
        documents = db.query(Document).filter(Document.user_id == user.id).order_by(Document.created_at.desc()).all()

        if not documents:
            await message.answer("Nie masz ≈ºadnych dokument√≥w w systemie.")
            return

        # Przygotuj wiadomo≈õƒá z listƒÖ dokument√≥w
        response = "üìÑ *Twoje dokumenty:*\n\n"

        # Pobierz aktualnƒÖ datƒô z uwzglƒôdnieniem strefy czasowej UTC
        current_date = datetime.now(pytz.UTC)

        for i, doc in enumerate(documents, 1):
            # Podstawowe informacje o dokumencie (kt√≥re na pewno istniejƒÖ)
            response += f"*{i}. {doc.name}*\n"
            response += f"   Data dodania: {doc.created_at.strftime('%d.%m.%Y')}\n"

            # Sprawdzenie czy atrybut expiration_date istnieje
            if hasattr(doc, 'expiration_date') and doc.expiration_date:
                # Obliczenie liczby dni z uwzglƒôdnieniem stref czasowych
                days_left = (doc.expiration_date - current_date).days
                expiration_date = doc.expiration_date.strftime('%d.%m.%Y')

                response += f"   Data wa≈ºno≈õci: {expiration_date}\n"

                # Informacja o tym, ile dni pozosta≈Ço
                if days_left > 30:
                    response += f"   Pozosta≈Ço: {days_left} dni\n"
                elif days_left > 0:
                    response += f"   ‚ö†Ô∏è Pozosta≈Ço tylko: {days_left} dni! ‚ö†Ô∏è\n"
                elif days_left == 0:
                    response += f"   ‚ö†Ô∏è UWAGA: Dokument wygasa dzisiaj! ‚ö†Ô∏è\n"
                else:
                    response += f"   ‚õî Dokument wygas≈Ç {abs(days_left)} dni temu! ‚õî\n"
            else:
                response += "   Brak daty wa≈ºno≈õci\n"

            response += "\n"

        # Wy≈õlij wiadomo≈õƒá u≈ºywajƒÖc formatowania Markdown
        await message.answer(response, parse_mode="Markdown")

    finally:
        db.close()


async def save_user_contact(telegram_id, first_name, last_name, phone_number, username=None):
    """Zapisuje lub aktualizuje dane kontaktowe u≈ºytkownika"""
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        user = User(
            telegram_id=telegram_id,
            first_name=first_name,
            last_name=last_name,
            username=username,
            phone_number=phone_number
        )
        db.add(user)
    else:
        user.phone_number = phone_number
        user.first_name = first_name
        user.last_name = last_name
        user.username = username
    db.commit()
    db.refresh(user)
    return user


async def save_document(user_id, file_id, name, mime_type, size, bot=None):
    """Funkcja pomocnicza do zapisywania informacji o dokumencie"""
    db = next(get_db())
    try:
        document = Document(
            file_id=file_id,
            name=name,
            mime_type=mime_type,
            size=size,
            user_id=user_id
        )
        db.add(document)
        db.commit()
        db.refresh(document)

        # Je≈õli mamy dostƒôp do bota, pr√≥bujemy przes≈Çaƒá dokument do GCS
        if bot:
            try:
                from bot.storage import GCSManager
                gcs_manager = GCSManager()

                # Przesy≈Çanie do GCS
                gcs_path = await gcs_manager.upload_document(
                    telegram_bot=bot,
                    file_id=file_id,
                    user_id=user_id,
                    document_name=name
                )

                # Aktualizacja informacji w bazie danych
                document.gcs_file_path = gcs_path
                document.gcs_uploaded = True
                db.commit()
                db.refresh(document)
                logging.info(f"Dokument {name} przes≈Çany do GCS: {gcs_path}")
            except Exception as e:
                logging.error(f"Nie uda≈Ço siƒô przes≈Çaƒá dokumentu do GCS: {e}")

        return document
    finally:
        db.close()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    # Czyszczenie poprzedniego stanu
    await state.clear()

    # Sprawdzenie, czy u≈ºytkownik ju≈º istnieje w bazie danych
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

        if user:
            # U≈ºytkownik ju≈º istnieje - witamy go i proponujemy wys≈Çanie dokumentu
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="Wy≈õlij dokument")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer(
                f"Witaj ponownie, {user.first_name}! Mo≈ºesz wys≈Çaƒá dokument.",
                reply_markup=keyboard
            )
            await state.update_data(user_id=user.id)
            await state.update_data(phone_number=user.phone_number)
            await state.set_state(UserStates.WAITING_FOR_DOCUMENT)
            return
    finally:
        db.close()

    # Je≈õli u≈ºytkownik nie istnieje, prosimy o numer telefonu
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="Wy≈õlij numer", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("Cze≈õƒá! Proszƒô najpierw o podanie numeru telefonu.", reply_markup=keyboard)
    await state.set_state(UserStates.WAITING_FOR_PHONE)


@router.message(UserStates.WAITING_FOR_PHONE, F.content_type == ContentType.CONTACT)
async def get_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    name = f"{contact.first_name} {contact.last_name if contact.last_name else ''}"

    # Zapisz kontakt u≈ºytkownika w bazie danych
    user = await save_user_contact(
        message.from_user.id,
        contact.first_name,
        contact.last_name,
        contact.phone_number,
        message.from_user.username
    )

    # Zapisz id u≈ºytkownika w stanie do p√≥≈∫niejszego u≈ºycia
    await state.update_data(user_id=user.id)
    await state.update_data(phone_number=contact.phone_number)

    # Teraz popro≈õ o wys≈Çanie dokumentu
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="Wy≈õlij dokument")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        f"Dziƒôkujƒô, {name.strip()}. Tw√≥j numer +{contact.phone_number} zosta≈Ç zapisany.",
        reply_markup=keyboard
    )
    await state.set_state(UserStates.WAITING_FOR_DOCUMENT)


@router.message(UserStates.WAITING_FOR_DOCUMENT, F.text == "Wy≈õlij dokument")
async def send_document_request(message: Message, state: FSMContext):
    await message.answer("Proszƒô wy≈õlij dokument", reply_markup=ReplyKeyboardRemove())


@router.message(UserStates.WAITING_FOR_DOCUMENT, F.content_type == ContentType.DOCUMENT)
async def get_document(message: types.Message, state: FSMContext):
    document = message.document
    user_data = await state.get_data()

    # Zapisz dokument w bazie danych (teraz przekazujemy te≈º obiekt bota)
    doc = await save_document(
        user_data['user_id'],
        document.file_id,
        document.file_name,
        document.mime_type,
        document.file_size,
        bot=message.bot  # Przekazujemy obiekt bota, aby m√≥g≈Ç pobraƒá plik
    )

    await state.update_data(document_id=doc.id)

    # Poka≈º informacje o dokumencie
    response_text = (
        f"Dokument otrzymany:\n"
        f"Nazwa: {document.file_name}\n"
        f"Rozmiar: {document.file_size} bajt√≥w\n"
    )

    # Dodaj informacjƒô o statusie przesy≈Çania do GCS
    if hasattr(doc, 'gcs_uploaded') and doc.gcs_uploaded:
        response_text += "‚úÖ Dokument zosta≈Ç zapisany w bezpiecznym magazynie w chmurze.\n"
    else:
        response_text += "‚ö†Ô∏è Dokument zosta≈Ç zapisany tylko w systemie Telegram.\n"

    await message.answer(response_text)

    # Popro≈õ o datƒô wa≈ºno≈õci - rozpocznij od roku
    current_year = datetime.now().year
    years_keyboard = []
    row = []

    for year in range(current_year, current_year + 3):
        row.append(InlineKeyboardButton(text=str(year), callback_data=f"year_{year}"))
        if len(row) == 3:
            years_keyboard.append(row)
            row = []

    if row:  # Dodaj pozosta≈Çe przyciski
        years_keyboard.append(row)

    markup = InlineKeyboardMarkup(inline_keyboard=years_keyboard)
    await message.answer("Wybierz rok wa≈ºno≈õci dokumentu:", reply_markup=markup)
    await state.set_state(UserStates.DATE_YEAR)


@router.callback_query(UserStates.DATE_YEAR)
async def process_year(callback_query: types.CallbackQuery, state: FSMContext):
    year = int(callback_query.data.split('_')[1])
    await state.update_data(exp_year=year)

    # Teraz zapytaj o miesiƒÖc
    months_keyboard = []
    row = []

    for month in range(1, 13):
        month_name = calendar.month_name[month][:3]  # Skr√≥cona nazwa miesiƒÖca
        row.append(InlineKeyboardButton(text=month_name, callback_data=f"month_{month}"))
        if len(row) == 4:  # 4 miesiƒÖce w wierszu
            months_keyboard.append(row)
            row = []

    if row:
        months_keyboard.append(row)

    markup = InlineKeyboardMarkup(inline_keyboard=months_keyboard)
    await callback_query.message.edit_text(f"Rok: {year}. Teraz wybierz miesiƒÖc:", reply_markup=markup)
    await state.set_state(UserStates.DATE_MONTH)


@router.callback_query(UserStates.DATE_MONTH)
async def process_month(callback_query: types.CallbackQuery, state: FSMContext):
    month = int(callback_query.data.split('_')[1])
    user_data = await state.get_data()
    year = user_data['exp_year']

    await state.update_data(exp_month=month)

    # Pobierz liczbƒô dni w wybranym miesiƒÖcu
    _, days_in_month = calendar.monthrange(year, month)

    # Utw√≥rz klawiaturƒô dla dni
    days_keyboard = []
    row = []

    for day in range(1, days_in_month + 1):
        row.append(InlineKeyboardButton(text=str(day), callback_data=f"day_{day}"))
        if len(row) == 7:  # 7 dni w wierszu
            days_keyboard.append(row)
            row = []

    if row:
        days_keyboard.append(row)

    markup = InlineKeyboardMarkup(inline_keyboard=days_keyboard)
    month_name = calendar.month_name[month]
    await callback_query.message.edit_text(
        f"Rok: {year}, MiesiƒÖc: {month_name}. Teraz wybierz dzie≈Ñ:",
        reply_markup=markup
    )
    await state.set_state(UserStates.DATE_DAY)


@router.callback_query(UserStates.DATE_DAY)
async def process_day(callback_query: types.CallbackQuery, state: FSMContext):
    day = int(callback_query.data.split('_')[1])
    user_data = await state.get_data()

    year = user_data['exp_year']
    month = user_data['exp_month']

    # Utw√≥rz datƒô wa≈ºno≈õci z informacjƒÖ o strefie czasowej
    expiration_date = datetime(year, month, day, tzinfo=pytz.UTC)

    # Oblicz daty przypomnie≈Ñ
    one_month_before = expiration_date - timedelta(days=30)
    three_weeks_before = expiration_date - timedelta(weeks=3)
    two_weeks_before = expiration_date - timedelta(weeks=2)

    # Zapisz datƒô wa≈ºno≈õci w bazie danych, je≈õli to mo≈ºliwe
    db = next(get_db())
    try:
        document = db.query(Document).filter(Document.id == user_data['document_id']).first()
        if document:
            # Sprawdzamy, czy istnieje atrybut expiration_date
            has_expiration_field = hasattr(document, 'expiration_date')

            if has_expiration_field:
                # Je≈õli pole istnieje, aktualizujemy je
                document.expiration_date = expiration_date

                # Sprawdzamy, czy istniejƒÖ pola dla flag przypomnie≈Ñ
                if hasattr(document, 'telegram_reminder_sent'):
                    document.telegram_reminder_sent = False
                if hasattr(document, 'sms_reminder_sent'):
                    document.sms_reminder_sent = False
                if hasattr(document, 'call_reminder_sent'):
                    document.call_reminder_sent = False

                db.commit()
                db.refresh(document)

                # Je≈õli mamy reminder_system w danych, planujemy przypomnienia
                if "reminder_system" in callback_query.bot.data:
                    reminder_system = callback_query.bot.data["reminder_system"]
                    await reminder_system.schedule_document_reminders(
                        user_data['user_id'],
                        document.id,
                        expiration_date
                    )
            else:
                logging.warning("Model Document nie posiada pola expiration_date")
    except Exception as e:
        logging.error(f"B≈ÇƒÖd podczas aktualizacji daty wa≈ºno≈õci dokumentu: {e}")
    finally:
        db.close()

    await callback_query.message.edit_text(
        f"Dziƒôkujƒô! Dokument wa≈ºny do: {day}.{month}.{year}\n\n"
        f"Przypomnienia zosta≈Çy ustawione:\n"
        f"- Wiadomo≈õƒá w Telegram: {one_month_before.strftime('%d.%m.%Y')}\n"
        f"- SMS na numer +{user_data['phone_number']}: {three_weeks_before.strftime('%d.%m.%Y')}\n"
        f"- Po≈ÇƒÖczenie g≈Çosowe: {two_weeks_before.strftime('%d.%m.%Y')}"
    )

    # Zresetuj stan
    await state.clear()


# Upewnij siƒô, ≈ºe u≈ºytkownicy nie mogƒÖ pominƒÖƒá procesu
@router.message(F.content_type == ContentType.DOCUMENT)
async def document_out_of_order(message: types.Message):
    await message.answer("Najpierw proszƒô podaƒá numer telefonu. Wpisz /start aby rozpoczƒÖƒá.")


@router.message(F.text == "Wy≈õlij dokument")
async def document_request_out_of_order(message: types.Message):
    await message.answer("Najpierw proszƒô podaƒá numer telefonu. Wpisz /start aby rozpoczƒÖƒá.")


@router.message(Command("get_document"))
async def cmd_get_document(message: Message):
    """Generuje link do pobrania dokumentu"""
    # Popro≈õ o ID dokumentu lub nazwƒô
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Poka≈º moje dokumenty", callback_data="show_documents")]
        ]
    )
    await message.answer(
        "Aby pobraƒá dokument, najpierw sprawd≈∫ listƒô swoich dokument√≥w:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "show_documents")
async def show_documents_for_download(callback_query: types.CallbackQuery):
    """Pokazuje listƒô dokument√≥w u≈ºytkownika z przyciskami do pobrania"""
    db = next(get_db())
    try:
        # Znajd≈∫ u≈ºytkownika po telegram_id
        user = db.query(User).filter(User.telegram_id == callback_query.from_user.id).first()

        if not user:
            await callback_query.message.answer(
                "Nie jeste≈õ zarejestrowany w systemie. U≈ºyj /start aby siƒô zarejestrowaƒá.")
            return

        # Pobierz wszystkie dokumenty u≈ºytkownika
        documents = db.query(Document).filter(Document.user_id == user.id).order_by(Document.created_at.desc()).all()

        if not documents:
            await callback_query.message.answer("Nie masz ≈ºadnych dokument√≥w w systemie.")
            return

        # Generuj przyciski dla ka≈ºdego dokumentu
        keyboard = []
        for doc in documents:
            # Sprawd≈∫, czy dokument ma ≈õcie≈ºkƒô GCS
            if hasattr(doc, 'gcs_file_path') and doc.gcs_file_path:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üìÑ {doc.name}",
                        callback_data=f"download_{doc.id}"
                    )
                ])

        if not keyboard:
            await callback_query.message.answer("Nie znaleziono dokument√≥w dostƒôpnych do pobrania.")
            return

        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback_query.message.answer(
            "Wybierz dokument, kt√≥ry chcesz pobraƒá:",
            reply_markup=markup
        )
    finally:
        db.close()


@router.callback_query(lambda c: c.data.startswith("download_"))
async def generate_download_link(callback_query: types.CallbackQuery):
    """Generuje link do pobrania wybranego dokumentu"""
    document_id = int(callback_query.data.split('_')[1])

    db = next(get_db())
    try:
        document = db.query(Document).filter(Document.id == document_id).first()

        if not document:
            await callback_query.message.answer("Nie znaleziono dokumentu.")
            return

        # Sprawd≈∫, czy dokument ma ≈õcie≈ºkƒô GCS
        if not hasattr(document, 'gcs_file_path') or not document.gcs_file_path:
            await callback_query.message.answer(
                "Ten dokument nie jest dostƒôpny do pobrania z chmury. "
                "Zapisany jest tylko w systemie Telegram."
            )
            return

        try:
            # Generuj link do pobrania
            from bot.storage import GCSManager
            gcs_manager = GCSManager()

            # Tworzenie URL z czasem wyga≈õniƒôcia 1 godzina (3600 sekund)
            download_url = gcs_manager.get_document_url(document.gcs_file_path, expire_time=3600)

            # Tworzenie przycisku z linkiem
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîó Pobierz dokument", url=download_url)]
                ]
            )

            await callback_query.message.answer(
                f"Link do pobrania dokumentu '{document.name}' jest wa≈ºny przez 1 godzinƒô:",
                reply_markup=keyboard
            )
        except Exception as e:
            logging.error(f"B≈ÇƒÖd podczas generowania linku do pobrania: {e}")
            await callback_query.message.answer(
                "WystƒÖpi≈Ç b≈ÇƒÖd podczas generowania linku do pobrania. Spr√≥buj ponownie p√≥≈∫niej."
            )
    finally:
        db.close()
